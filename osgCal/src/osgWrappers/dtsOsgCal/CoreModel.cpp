// ***************************************************************************
//
//   Generated automatically by genwrapper.
//   Please DO NOT EDIT this file!
//
// ***************************************************************************

#include <osgIntrospection/ReflectionMacros>
#include <osgIntrospection/TypedMethodInfo>
#include <osgIntrospection/StaticMethodInfo>
#include <osgIntrospection/Attributes>

#include <dtsOsgCal/CoreModel>
#include <dtsOsgCal/IOUtils>

// Must undefine IN and OUT macros defined in Windows headers
#ifdef IN
#undef IN
#endif
#ifdef OUT
#undef OUT
#endif

BEGIN_ENUM_REFLECTOR(dtsOsgCal::CoreModel::BufferIndex)
	I_EnumLabel(dtsOsgCal::CoreModel::BI_VERTEX);
	I_EnumLabel(dtsOsgCal::CoreModel::BI_WEIGHT);
	I_EnumLabel(dtsOsgCal::CoreModel::BI_NORMAL);
	I_EnumLabel(dtsOsgCal::CoreModel::BI_MATRIX_INDEX);
	I_EnumLabel(dtsOsgCal::CoreModel::BI_TEX_COORD);
	I_EnumLabel(dtsOsgCal::CoreModel::BI_INDEX);
	I_EnumLabel(dtsOsgCal::CoreModel::BI_TANGENT);
	I_EnumLabel(dtsOsgCal::CoreModel::BI_BINORMAL);
END_REFLECTOR

BEGIN_OBJECT_REFLECTOR(dtsOsgCal::CoreModel)
	I_Constructor0();
	I_Method1(void, load, IN, const std::string &, cfgFileName);
	I_Method0(CalCoreModel *, getCalCoreModel);
	I_Method0(CalHardwareModel *, getCalHardwareModel);
	I_Method0(const std::vector< GLuint > &, getVbos);
	I_Method0(float, getScale);
	I_Method0(const std::vector< dtsOsgCal::CoreModel::Mesh > &, getMeshes);
	I_Method0(const std::vector< std::string > &, getAnimationNames);
	I_Method0(const dtsOsgCal::VertexBuffer *, getVertexBuffer);
	I_Method0(const dtsOsgCal::WeightBuffer *, getWeightBuffer);
	I_Method0(const dtsOsgCal::MatrixIndexBuffer *, getMatrixIndexBuffer);
	I_Method0(const dtsOsgCal::IndexBuffer *, getIndexBuffer);
	I_Method0(const dtsOsgCal::NormalBuffer *, getNormalBuffer);
	I_Method0(const dtsOsgCal::TexCoordBuffer *, getTexCoordBuffer);
	I_ReadOnlyProperty(const std::vector< std::string > &, AnimationNames);
	I_ReadOnlyProperty(CalCoreModel *, CalCoreModel);
	I_ReadOnlyProperty(CalHardwareModel *, CalHardwareModel);
	I_ReadOnlyProperty(const dtsOsgCal::IndexBuffer *, IndexBuffer);
	I_ReadOnlyProperty(const dtsOsgCal::MatrixIndexBuffer *, MatrixIndexBuffer);
	I_ReadOnlyProperty(const std::vector< dtsOsgCal::CoreModel::Mesh > &, Meshes);
	I_ReadOnlyProperty(const dtsOsgCal::NormalBuffer *, NormalBuffer);
	I_ReadOnlyProperty(float, Scale);
	I_ReadOnlyProperty(const dtsOsgCal::TexCoordBuffer *, TexCoordBuffer);
	I_ReadOnlyProperty(const std::vector< GLuint > &, Vbos);
	I_ReadOnlyProperty(const dtsOsgCal::VertexBuffer *, VertexBuffer);
	I_ReadOnlyProperty(const dtsOsgCal::WeightBuffer *, WeightBuffer);
END_REFLECTOR

BEGIN_VALUE_REFLECTOR(dtsOsgCal::CoreModel::Mesh)
	I_Constructor0();
	I_Method0(int, getIndexInVbo);
	I_Method0(int, getIndexesCount);
	I_ReadOnlyProperty(int, IndexInVbo);
	I_ReadOnlyProperty(int, IndexesCount);
	I_PublicMemberProperty(std::string, name);
	I_PublicMemberProperty(CalCoreMesh *, coreMesh);
	I_PublicMemberProperty(CalCoreSubmesh *, coreSubMesh);
	I_PublicMemberProperty(int, maxBonesInfluence);
	I_PublicMemberProperty(bool, rigid);
	I_PublicMemberProperty(int, hardwareMeshId);
	I_PublicMemberProperty(CalHardwareModel::CalHardwareMesh *, hardwareMesh);
	I_PublicMemberProperty(osg::ref_ptr< osg::StateSet >, hardwareStateSet);
	I_PublicMemberProperty(osg::ref_ptr< osg::StateSet >, staticHardwareStateSet);
	I_PublicMemberProperty(osg::ref_ptr< osg::StateSet >, stateSet);
	I_PublicMemberProperty(osg::BoundingBox, boundingBox);
END_REFLECTOR

BEGIN_VALUE_REFLECTOR(dtsOsgCal::HardwareMeshStateSetCache)
	I_ConstructorWithDefaults1(IN, dtsOsgCal::MeshStateSetCache *, sc, 0);
	I_Method1(osg::StateSet *, get, IN, const dtsOsgCal::HwStateDesc &, sd);
END_REFLECTOR

BEGIN_VALUE_REFLECTOR(dtsOsgCal::MapsCache)
	I_ConstructorWithDefaults1(IN, dtsOsgCal::TexturesCache *, tc, 0);
	I_Method1(osg::StateSet *, get, IN, const dtsOsgCal::MapDesc &, md);
	I_PublicMemberProperty(osg::ref_ptr< dtsOsgCal::TexturesCache >, texturesCache);
END_REFLECTOR

BEGIN_VALUE_REFLECTOR(dtsOsgCal::MaterialDesc)
	I_Constructor0();
	I_Constructor1(IN, CalCoreMaterial *, ccm);
	I_PublicMemberProperty(CalCoreMaterial::Color, ambientColor);
	I_PublicMemberProperty(CalCoreMaterial::Color, diffuseColor);
	I_PublicMemberProperty(CalCoreMaterial::Color, specularColor);
	I_PublicMemberProperty(float, shininess);
END_REFLECTOR

BEGIN_VALUE_REFLECTOR(dtsOsgCal::MaterialsCache)
	I_Constructor0();
	I_Method1(osg::Material *, get, IN, const dtsOsgCal::MaterialDesc &, md);
END_REFLECTOR

BEGIN_VALUE_REFLECTOR(dtsOsgCal::MeshStateSetCache)
	I_ConstructorWithDefaults2(IN, dtsOsgCal::MaterialsCache *, matc, 0, IN, dtsOsgCal::MapsCache *, mc, 0);
	I_Method1(osg::StateSet *, get, IN, const dtsOsgCal::StateDesc &, sd);
END_REFLECTOR

BEGIN_VALUE_REFLECTOR(dtsOsgCal::TexturesCache)
	I_Constructor0();
	I_Method1(osg::Texture2D *, get, IN, const dtsOsgCal::TextureDesc &, td);
END_REFLECTOR

TYPE_NAME_ALIAS(std::string, dtsOsgCal::TextureDesc);

TYPE_NAME_ALIAS(std::vector< CalCoreMaterial::Map >, dtsOsgCal::MapDesc);

TYPE_NAME_ALIAS(std::pair< dtsOsgCal::MaterialDesc COMMA  dtsOsgCal::MapDesc >, dtsOsgCal::StateDesc);

TYPE_NAME_ALIAS(std::pair< dtsOsgCal::StateDesc COMMA  int >, dtsOsgCal::HwStateDesc);

STD_PAIR_REFLECTOR(std::pair< dtsOsgCal::MaterialDesc COMMA  dtsOsgCal::MapDesc >);

STD_PAIR_REFLECTOR(std::pair< dtsOsgCal::StateDesc COMMA  int >);

STD_VECTOR_REFLECTOR(std::vector< CalCoreMaterial::Map >);

STD_VECTOR_REFLECTOR(std::vector< GLuint >);

STD_VECTOR_REFLECTOR(std::vector< dtsOsgCal::CoreModel::Mesh >);

STD_VECTOR_REFLECTOR(std::vector< std::string >);

