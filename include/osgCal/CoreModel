/* -*- c++ -*-
    Copyright (C) 2003 <ryu@gpul.org>
    Copyright (C) 2006 Vladimir Shabanov <vshabanoff@gmail.com>

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/
#ifndef __OSGCAL__CORE_MODEL_H__
#define __OSGCAL__CORE_MODEL_H__

#include <vector>
#include <map>
#include <stdexcept>
#include <memory>

#include <cal3d/cal3d.h>

#include <osg/Texture2D>
#include <osg/Referenced>
#include <osg/Material>
#include <osg/Program>
#include <osg/BufferObject>
#include <osgCal/Export>

#include <osgDB/ReaderWriter>

#include <osgCal/IOUtils>

namespace osgCal
{
    // -- STATE SHARING PART --
    
    /**
     * Abstract base cache class.
     * To maximize state sharing we use separate caches for
     * osg::Material, osg::Texture2D, osg::StateSet (texturing only) and osg::StateSet (material and texturing).
     * There is also a separate cache for osg::StateSet with skeletal vertex shader added.
     *
     * Here is an internal cache hierarchy (the keys are shown in brakets):
     *
     * HardwareMeshStateSetCache[HwStateDesc]
     *  |- SoftwareMeshStateSetCache[SwStateDesc]
     *  \---|- TexturesCache[TextureDesc]
     *      \- MaterialsCache[MaterialDesc]
     */

    // -- Cache keys --
   
    /// CalCoreMaterial, osg::Material cache key
    class OSGCAL_EXPORT MaterialDesc
    {
        public:
            osg::Vec4      ambientColor;
            osg::Vec4      diffuseColor;
            osg::Vec4      specularColor;
            float          shininess;

            MaterialDesc()
                : shininess( 0 )
            {}

            /**
             * Setup material using core material and glossiness &
             * shininess.
             * There is a trouble with exporter, shininess value is
             * actually a specularColor strength and actual shininess
             * (which named as `glossiness' in 3DSMax) doesn't
             * exported at all.
             */
            MaterialDesc( CalCoreMaterial* ccm,
                          float glossiness,
                          float opacity );
    };

    /// Textures cache key (file name with full path)
    typedef std::string TextureDesc;

    /// Software mesh state set cache key
    class OSGCAL_EXPORT SwStateDesc
    {
        public:
            MaterialDesc material;
            TextureDesc  diffuseMap;

            /**
             * Number of sides for mesh.
             * 0 -- undefined (use default OSG culling);
             * 1 -- one side (backface culling);
             * 2 -- two sides (no culling for sw mesh and gl_FronFacing
             * hw mesh, or culling for hw mesh when gl_FronFacing is
             * not supported (using two pass with `face' uniform set
             * to 1, then -1 + frontface culling)
             */
            int          sides;

            SwStateDesc()
                : sides( 0 )
            {}
    };

    /// Hardware mesh state set cache key
    class OSGCAL_EXPORT HwStateDesc : public SwStateDesc
    {
        public:
            TextureDesc  normalsMap;
            TextureDesc  bumpMap; /// currently not supported
            float        normalsMapAmount; /// currently not supported
            float        bumpMapAmount; /// currently not supported
            int          shaderFlags; /// to determine, which shader
                                      /// program will be taken from
                                      /// shader program chache.

            HwStateDesc()
                : normalsMapAmount( 0 )
                , bumpMapAmount( 0 )
                , shaderFlags( 0 )
            {}

            /**
             * Create whole state description from cal3d material and
             * its maps.
             */
            HwStateDesc( CalCoreMaterial* m,
                         const std::string& dir = std::string() );
    };

    // -- Some utility --

#define lt( a, b, t ) (a < b ? true : ( b < a ? false : t ))
// // a < b || (!( b < a ) && t )
    inline
    bool operator < ( const MaterialDesc& md1,
                      const MaterialDesc& md2 )
    {
        bool r = lt( md1.ambientColor,
                     md2.ambientColor,
                 lt( md1.diffuseColor,
                     md2.diffuseColor,
                 lt( md1.specularColor,
                     md2.specularColor,
                 lt( md1.shininess,
                     md2.shininess, false ))));
        return r;
    }

    inline
    bool operator < ( const SwStateDesc& d1,
                      const SwStateDesc& d2 )
    {
        bool r = lt( d1.material,
                     d2.material,
                 lt( d1.diffuseMap,
                     d2.diffuseMap,
                 lt( d1.sides,
                     d2.sides, false )));
        return r;
    }

    inline
    bool operator < ( const HwStateDesc& d1,
                      const HwStateDesc& d2 )
    {
        bool r = lt( static_cast< SwStateDesc >( d1 ),
                     static_cast< SwStateDesc >( d2 ),
                 lt( d1.normalsMap,
                     d2.normalsMap,
                 lt( d1.bumpMap,
                     d2.bumpMap,
                 lt( d1.normalsMapAmount,
                     d2.normalsMapAmount,
                 lt( d1.bumpMapAmount,
                     d2.bumpMapAmount,
                 lt( d1.shaderFlags,
                     d2.shaderFlags, false ))))));
        return r;
    }

#undef lt

    // -- Caches itself --
    template < typename Key, typename Value, typename Class >
    Value*
    getOrCreate( std::map< Key, osg::ref_ptr< Value > >& map,
                 const Key&                              key,
                 Class*                                  obj,
                 Value*                        ( Class::*create )( const Key& ) )
    {
        typename std::map< Key, osg::ref_ptr< Value > >::const_iterator i = map.find( key );
        if ( i != map.end() )
        {
            return i->second.get();
        }
        else
        {
            Value* v = (obj ->* create)( key ); // damn c++!
            map[ key ] = v;
            return v;
        }
    }
                 
    class MaterialsCache : public osg::Referenced
    {
        public:
            osg::Material* get( const MaterialDesc& md )
            {
                return getOrCreate( cache, md, this, &MaterialsCache::createMaterial );
            }

        private:
            typedef std::map< MaterialDesc, osg::ref_ptr< osg::Material > > Map;
            Map cache;

            osg::Material* createMaterial( const MaterialDesc& desc );
    };

    class TexturesCache : public osg::Referenced
    {
        public:
            osg::Texture2D* get( const TextureDesc& td )
            {
                return getOrCreate( cache, td, this, &TexturesCache::createTexture );
            }

        private:
            typedef std::map< TextureDesc, osg::ref_ptr< osg::Texture2D > > Map;
            Map cache;
            
            osg::Texture2D* createTexture( const TextureDesc& fileName )
                throw (std::runtime_error);
    };

    class SwMeshStateSetCache : public osg::Referenced
    {
        public:
            SwMeshStateSetCache( MaterialsCache* mc = 0,
                                 TexturesCache* tc = 0 )
                : materialsCache( mc ? mc : new MaterialsCache() )
                , texturesCache( tc ? tc : new TexturesCache() )
            {}
            
            osg::StateSet* get( const SwStateDesc& swsd )
            {
                return getOrCreate( cache, swsd, this,
                                    &SwMeshStateSetCache::createSwMeshStateSet );
            }

        private:
            typedef std::map< SwStateDesc, osg::ref_ptr< osg::StateSet > > Map;

            Map cache;
            osg::ref_ptr< MaterialsCache > materialsCache;
            osg::ref_ptr< TexturesCache >  texturesCache;

            osg::StateSet* createSwMeshStateSet( const SwStateDesc& swsd );
    };

    class HwMeshStateSetCache : public osg::Referenced
    {
        public:
            HwMeshStateSetCache( SwMeshStateSetCache* swssc = 0,
                                 TexturesCache* tc = 0 )
                : swMeshStateSetCache( swssc ? swssc : new SwMeshStateSetCache() )
                , texturesCache( tc ? tc : new TexturesCache() )
            {}
            
            osg::StateSet* get( const HwStateDesc& swsd )
            {
                return getOrCreate( cache, swsd, this,
                                    &HwMeshStateSetCache::createHwMeshStateSet );
            }

        private:
            typedef std::map< HwStateDesc, osg::ref_ptr< osg::StateSet > > Map;

            Map cache;
            osg::ref_ptr< SwMeshStateSetCache > swMeshStateSetCache;
            osg::ref_ptr< TexturesCache >       texturesCache;

            osg::StateSet* createHwMeshStateSet( const HwStateDesc& swsd );
    };

    
    // -- CORE MODEL CLASS --

    /**
     * Core Model class that creates a templated core object.
     * In order to create an animated model, a cal3d core model has to
     * be created. Given this core model it is possible to instantiate it
     * by creating a model which is in fact the real animated model and
     * object which can be inserted into an osg graph.
     */
    class OSGCAL_EXPORT CoreModel: public osg::Object
    {
        public:
            META_Object(osgCal, CoreModel);

            CoreModel();

            /**
             * Loads cal3d core model and prepare all internal stuff for fast Models creation.
             * This function may be called only once.
             */
            void load( const std::string& cfgFileName ) throw (std::runtime_error);

            CalCoreModel*       getCalCoreModel() const     { return calCoreModel; }
            CalHardwareModel*   getCalHardwareModel() const { return calHardwareModel; }

            /**
             * Indexes of corresponding buffers in vector returned by getVbos().
             */
            enum BufferIndex
            {
                BI_VERTEX           = 0,
                BI_WEIGHT           = 1,
                BI_NORMAL           = 2,
                BI_MATRIX_INDEX     = 3,
                BI_TEX_COORD        = 4,
                BI_INDEX            = 5,
                BI_TANGENT          = 6,
                BI_BINORMAL         = 7,
                BI_TOTAL_COUNT      = 8
            };

            
            osg::BufferObject* getVbo( int index ) { return vbos[ index ].get(); }

            struct Mesh
            {
                public:

                    Mesh()
                        : coreMesh( 0 )
                        , coreSubMesh( 0 )
                        , maxBonesInfluence( 0 )
                        , rigid( false )
                        , hardwareMeshId( -1 )
                        , hardwareMesh( 0 )
                    {}
                    
                    std::string                   name;
                    HwStateDesc                   hwStateDesc;

                    CalCoreMesh*                  coreMesh;
                    CalCoreSubmesh*               coreSubMesh;

                    int                           maxBonesInfluence;

                    /**
                     * Is mesh rigid?
                     * Mesh is rigid when all its vertices are
                     * rigged to one bone with weight = 1.0,
                     * or when no one vertex is rigged at all.
                     */
                    bool                          rigid;
                    
                    int                           hardwareMeshId;
                    /// corresponding hardware mesh, may be NULL ()
                    // TODO: we must automatically determine which meshes are software,
                    // i.e. used for picking, springs, collision, etc.
                    // also some meshes may be invisible, but calculating (collision, picking)
                    // some meshes may be visible only in some configurations
                    // and finally some meshes can have more than one material set
                    // for different skins
                    CalHardwareModel::CalHardwareMesh*  hardwareMesh;

                    int getIndexInVbo() const   { return hardwareMesh->startIndex; }
                    int getIndexesCount() const { return hardwareMesh->faceCount * 3; }

                    /**
                     * Mesh state set. Contain material, textures and also
                     * vertex program when mesh is hardware (hardwareMesh != 0).
                     */
                    osg::ref_ptr< osg::StateSet >       hardwareStateSet;
                    osg::ref_ptr< osg::StateSet >       staticHardwareStateSet; ///< zero bones state set
                    osg::ref_ptr< osg::StateSet >       stateSet;

                    osg::BoundingBox                    boundingBox;
            };

            float getScale() const { return scale; }
            const std::vector< Mesh >&          getMeshes()         const { return meshes; }
            const std::vector< std::string >&   getAnimationNames() const { return animationNames; }


            //osg::Program* getSkeletalProgram() const;
            const VertexBuffer* getVertexBuffer() const { return vertexBuffer.get(); }
            const WeightBuffer* getWeightBuffer() const { return weightBuffer.get(); }
            const MatrixIndexBuffer* getMatrixIndexBuffer() const { return matrixIndexBuffer.get(); }
            const IndexBuffer* getIndexBuffer() const { return indexBuffer.get(); }
            const NormalBuffer* getNormalBuffer() const { return normalBuffer.get(); }            
            const TexCoordBuffer* getTexCoordBuffer() const { return texCoordBuffer.get(); }

        private:

            CoreModel(const CoreModel&, const osg::CopyOp& copyop=osg::CopyOp::SHALLOW_COPY);
            virtual ~CoreModel();

            float               scale;
            CalCoreModel*       calCoreModel;
            CalHardwareModel*   calHardwareModel;

            TexturesCache*              texturesCache;
            SwMeshStateSetCache*        swMeshStateSetCache;
            HwMeshStateSetCache*        hwMeshStateSetCache;

            std::vector< Mesh >         meshes;
            std::vector< std::string >  animationNames;

            osg::ref_ptr< VertexBuffer >        vertexBuffer;
            osg::ref_ptr< WeightBuffer >        weightBuffer;
            osg::ref_ptr< MatrixIndexBuffer >   matrixIndexBuffer;
            osg::ref_ptr< IndexBuffer >         indexBuffer;
            osg::ref_ptr< NormalBuffer >        normalBuffer;
            osg::ref_ptr< TexCoordBuffer >      texCoordBuffer;

            std::vector< osg::ref_ptr< osg::BufferObject > > vbos;            
    };

    inline
    bool
    operator == ( const CoreModel::Mesh& m1,
                  const CoreModel::Mesh& m2 )
    {
        return ( m1.coreMesh == m2.coreMesh
                 &&
                 m1.coreSubMesh == m2.coreSubMesh
                 &&
                 m1.hardwareMesh == m2.hardwareMesh );
    }

}; // namespace osgCal

#endif
