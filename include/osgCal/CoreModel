/* -*- c++ -*-
    Copyright (C) 2003 <ryu@gpul.org>
    Copyright (C) 2006 Vladimir Shabanov <vshabanoff@gmail.com>

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/
#ifndef __OSGCAL__CORE_MODEL_H__
#define __OSGCAL__CORE_MODEL_H__

#include <vector>
#include <stdexcept>

#include <cal3d/cal3d.h>

#include <osgCal/Export>
#include <osgCal/Material>
#include <osgCal/MeshLoader>
#include <osgCal/StateSetCache>

namespace osgCal
{
    /**
     * Core Model class that creates a templated core object.
     * In order to create an animated model, a cal3d core model has to
     * be created. Given this core model it is possible to instantiate it
     * by creating a model which is in fact the real animated model and
     * object which can be inserted into an osg graph.
     */
    class OSGCAL_EXPORT CoreModel: public osg::Object
    {
        public:
            META_Object(osgCal, CoreModel);

            CoreModel();

            enum LoadFlags
            {
                /**
                 * Show Tangent-Binormal-Normal basis.
                 */
                SHOW_TBN = 0x10, // TODO: restore it

                /**
                 * Enable fog in shader (exp, exp2 or linear mode)
                 */
                FOG_EXP = 0x20,
                FOG_EXP2 = 0x40,
                FOG_LINEAR = 0x20 + 0x40,
            };

            /**
             * Loads cal3d core model and prepare all internal stuff for fast Models creation.
             * This function may be called only once.
             */
            void load( const std::string& cfgFileName,
                       int flags = 0 ) throw (std::runtime_error);

            /**
             * Same as load, but doesn't throw exceptions on error.
             */
            bool loadNoThrow( const std::string& cfgFileName,
                              std::string&       errorText,
                              int                flags = 0 ) throw ();

            CalCoreModel*  getCalCoreModel()  const  { return calCoreModel; }

            int            getFlags()         const  { return flags; }
            StateSetCache* getStateSetCache() const  { return stateSetCache.get(); }

            /**
             * List of state sets used by Model's meshes
             */
            struct MeshStateSets : public osg::Referenced
            {
                public:
                    MeshStateSets( StateSetCache*  c,
                                   const Material& m,
                                   const MeshData* d );
                    
                    osg::ref_ptr< osg::StateSet >   software; ///< software state set

                    /**
                     * First element -- w/o depth mesh, second -- with one.
                     */
                    osg::ref_ptr< osg::StateSet >   hardware[2];
                    osg::ref_ptr< osg::StateSet >   staticHardware[2]; ///< zero bones state set

                    osg::ref_ptr< osg::StateSet >   depthOnly; ///< depth only hw state ste
                    osg::ref_ptr< osg::StateSet >   staticDepthOnly; ///< zero bones state set
            };

            /**
             * Mesh geometry display lists. Display lists are created
             * one per CoreModel::Mesh, not per Model's submesh
             */
            struct MeshDisplayLists : public osg::Referenced
            {
                public:
                    typedef osg::buffered_value< GLuint > GLObjectList;

                    /**
                     * Hardware mesh display lists, once compiled for
                     * one model they are shared for all core model
                     * instances.
                     */
                    mutable GLObjectList        lists;
                    mutable OpenThreads::Mutex  mutex;

                    /**
                     * Destroys display lists.
                     */
                    ~MeshDisplayLists();

                    /**
                     * Check that display lists are compiled for all
                     * contexts and free mesh data that is needed only
                     * for display lists (normals, tangents, texture
                     * coordinates).
                     *
                     * Use
                     * osg::DisplaySettings::instance()->setMaxNumberOfGraphicsContexts(N)
                     * to set number of contexts you need (default
                     * value is 32, so no mesh data or textures are
                     * freed by default).
                     */
                    void checkAllDisplayListsCompiled( MeshData* data ) const;

            };

            /**
             * Cal3d mesh prepared for fast creation.
             */
            struct Mesh : public osg::Referenced
            {
                public:

                    /**
                     * Creation of fresh mesh from data and material.
                     * New display list is created in this case.
                     */
                    Mesh( const CoreModel* model,
                          MeshData*        data,
                          const Material&  material );

                    /**
                     * Creation of mesh with new material.
                     * Display list is shared in this case.
                     */
                    Mesh( const CoreModel* model,
                          const Mesh* mesh,
                          const Material& newMaterial );

                    /**
                     * Mutable since we free some data after display lists compiled.
                     */
                    mutable osg::ref_ptr< MeshData >    data;
                    Material                            material;
                    osg::ref_ptr< MeshDisplayLists >    displayLists;
                    osg::ref_ptr< MeshStateSets >       stateSets;

            };

            float getScale() const { return scale; }

            typedef std::vector< osg::ref_ptr< Mesh > > MeshVector;
            
            const MeshVector&                   getMeshes()         const { return meshes; }
            const std::vector< std::string >&   getAnimationNames() const { return animationNames; }

        private:

            CoreModel(const CoreModel&, const osg::CopyOp& copyop=osg::CopyOp::SHALLOW_COPY);
            virtual ~CoreModel();

            int                 flags;
            float               scale;
            CalCoreModel*       calCoreModel;

            osg::ref_ptr< StateSetCache > stateSetCache;

            MeshVector                  meshes;
            std::vector< std::string >  animationNames;
    };


    // -- CalCoreModel I/O --

    OSGCAL_EXPORT CalCoreModel* loadCoreModel( const std::string& cfgFileName,
                                               float& scale,
                                               bool ignoreMeshes = false )
        throw (std::runtime_error);

}; // namespace osgCal

#endif
