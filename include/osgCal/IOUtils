/* -*- c++ -*-
    Copyright (C) 2006 Vladimir Shabanov <vshabanoff@gmail.com>

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/
#ifndef __OSGCAL__IOUTILS_H__
#define __OSGCAL__IOUTILS_H__

#include <stdexcept>

#include <cal3d/cal3d.h>

#include <osgCal/Export>
#include <osg/Array>
#include <osg/PrimitiveSet>

namespace osgCal
{

    // -- Some string utilities (used in material map names) --
    
    /**
     * Return "prefix" from "prefix:foo:bar/baz" or empty string
     * when no ':' found.
     */
    std::string getPrefix( const std::string& str );

    /**
     * Return "suffix" from "foo:bar/baz:suffix" or whole string
     * when no ':' found.
     */
    std::string getSuffix( const std::string& str );

    std::string getAfter( const std::string& prefix,
                          const std::string& str );

    bool prefixEquals( const std::string& str,
                       const std::string& prefix );

    bool endsWith( const std::string& str,
                   const std::string& suffix );


    // -- Some other utilities --
    
    OSGCAL_EXPORT bool isFileOlder( const std::string& fileName1,
                                    const std::string& fileName2 );
    OSGCAL_EXPORT bool isFileExists( const std::string& f );


    // -- Vertex buffer objects & I/O --
#define OSGCAL_MAX_BONES_PER_MESH       30
#define OSGCAL_MAX_VERTEX_PER_MODEL     1000000

    typedef osg::Vec3Array      VertexBuffer;
    typedef osg::Vec4Array      WeightBuffer;
    typedef osg::Vec2Array      TexCoordBuffer;
    typedef osg::UIntArray      IndexBuffer;

#ifdef OSG_CAL_BYTE_BUFFERS
    typedef osg::Vec3bArray     NormalBuffer;
    typedef osg::Vec3bArray     TangentBuffer;
    typedef osg::Vec3bArray     BinormalBuffer;
    typedef osg::Vec4ubArray    MatrixIndexBuffer;
#else
    typedef osg::Vec3Array      NormalBuffer;
    typedef osg::Vec3Array      TangentBuffer;
    typedef osg::Vec4Array      TangentAndHandednessBuffer;
    typedef osg::Vec3Array      BinormalBuffer;
    typedef osg::Vec4sArray     MatrixIndexBuffer;
#endif
    
    struct OSGCAL_EXPORT VBOs
    {
        public:

            osg::ref_ptr< VertexBuffer >        vertexBuffer;
            osg::ref_ptr< WeightBuffer >        weightBuffer;
            osg::ref_ptr< MatrixIndexBuffer >   matrixIndexBuffer;
            osg::ref_ptr< NormalBuffer >        normalBuffer;
            osg::ref_ptr< TangentBuffer >       tangentBuffer;
            osg::ref_ptr< BinormalBuffer >      binormalBuffer;
            osg::ref_ptr< TexCoordBuffer >      texCoordBuffer;
            osg::ref_ptr< IndexBuffer >         indexBuffer;
            // CalIndex equals to 4 byte UInt
            // since we handle more than 65536/3 faces

            VBOs( int maxVertices = OSGCAL_MAX_VERTEX_PER_MODEL,
                  int maxFaces = OSGCAL_MAX_VERTEX_PER_MODEL * 3 );

            virtual ~VBOs();

            int getVertexCount() const;
            int getFaceCount() const;

            /**
             * Sets vertex count and resize all vertex buffers.
             * @warning Buffers are resized so you must update your
             * references (if any) to buffers data.
             */
            void setVertexCount( int vc );

            /**
             * Sets face count and resize index buffer.
             * @warning Index buffer is resized so you must update your
             * references (if any) to buffer's data.
             */
            void setFaceCount( int fc );

        private:
            
            int vertexCount;
            int faceCount;
    };

    OSGCAL_EXPORT std::string VBOsCacheFileName( const std::string& cfgFileName );
    OSGCAL_EXPORT std::string HWModelCacheFileName( const std::string& cfgFileName );

    OSGCAL_EXPORT VBOs* loadVBOs( const std::string& fileName ) throw (std::runtime_error);
    OSGCAL_EXPORT void  saveVBOs( VBOs* vbos,
                                  const std::string& fileName ) throw (std::runtime_error);

    OSGCAL_EXPORT VBOs* loadVBOs( CalHardwareModel* calHardwareModel ) throw (std::runtime_error);


    // -- Mesh data --

    /**
     * Mesh data that is loaded from external file or created using
     * CalHardwareModel. This structure contains only geometry part of
     * mesh, materials are managed in Model/CoreModel
     */
    struct MeshData : public osg::Referenced
    {
        public:

            MeshData()
                : rigid( false )
                , rigidBoneId( -1 )
                , maxBonesInfluence( 0 )
            {}

            /**
             * Mesh name, may duplicate since for one source
             * CalCoreMesh there can be more than one hardware mesh.
             */
            std::string                   name;

            /**
             * Is mesh rigid?
             * Mesh is rigid when all its vertices are
             * rigged to one bone with weight = 1.0,
             * or when no one vertex is rigged at all.
             */
            bool                          rigid;

            /**
             * Rigid mesh bone id, or -1 when mesh is not rigged at all.
             */
            int                           rigidBoneId;

            /**
             * Max influencing bones used to select shader. Zero for
             * rigid meshes.
             */
            int                           maxBonesInfluence;
            
            /**
             * Map between indices in matrix index buffer and indices
             * of bones in CalSkeleton, exists only for non-rigid meshes
             */
            std::vector< int >            bonesIndices;

            /**
             * Bounding box in non-deformed state.
             */
            osg::BoundingBox              boundingBox;

            /**
             * DrawElementsUInt osg::PrimitiveSet is used as index
             * buffer to share it between meshes and use for picking.
             */
            osg::ref_ptr< osg::DrawElementsUInt >       indexBuffer;
            osg::ref_ptr< VertexBuffer >                vertexBuffer;

            /**
             * weight and matrixIndex buffers exists only for
             * non-rigid meshes.
             */
            osg::ref_ptr< WeightBuffer >                weightBuffer;
            osg::ref_ptr< MatrixIndexBuffer >           matrixIndexBuffer;

            osg::ref_ptr< NormalBuffer >                normalBuffer;

            /**
             * texCoordBuffer & tangentAndHandednessBuffer exists only
             * for meshes with 
             */
            osg::ref_ptr< TexCoordBuffer >              texCoordBuffer;
            osg::ref_ptr< TangentAndHandednessBuffer >  tangentAndHandednessBuffer;

            int getIndexesCount() const { return indexBuffer->size(); }

            int getBonesCount() const { return bonesIndices.size(); }
            int getBoneId( int index ) const { return bonesIndices[ index ]; }
            CalBone* getBone( int index,
                              CalSkeleton* skeleton ) const
            {
                const std::vector< CalBone* >& vectorBone = skeleton->getVectorBone();
                return vectorBone[ getBoneId( index ) ];
            }

    };

    typedef std::vector< osg::ref_ptr< MeshData > > MeshesVector;

    /**
     * Name of file with preprocessed meshes.
     */
    OSGCAL_EXPORT std::string meshesDataFileName( const std::string& cfgFileName );

    OSGCAL_EXPORT void loadMeshes( const std::string& fileName,
                                   MeshesVector& meshes )
        throw (std::runtime_error);

    OSGCAL_EXPORT void saveMeshes( const MeshesVector& meshes,
                                   const std::string&  fileName )
        throw (std::runtime_error);

    OSGCAL_EXPORT void loadMeshes( CalCoreModel* calCoreModel,
                                   MeshesVector& meshes )
        throw (std::runtime_error);
    
    // -- CalHardwareModel I/O --

    OSGCAL_EXPORT CalHardwareModel* loadHardwareModel( const CalCoreModel* calCoreModel,
                                                       const std::string& fileName,
                                                       std::vector< std::string >& meshNames )
        throw (std::runtime_error);
    OSGCAL_EXPORT void saveHardwareModel( const CalHardwareModel* calHardwareModel,
                                          const CalCoreModel*     calCoreModel,
                                          const std::vector< std::string >& meshNames,
                                          const std::string& fileName )
        throw (std::runtime_error);

    // -- CalCoreModel I/O --

    OSGCAL_EXPORT CalCoreModel* loadCoreModel( const std::string& cfgFileName,
                                               float& scale,
                                               bool ignoreMeshes = false )
        throw (std::runtime_error);
}; // namespace osgCal

#endif
