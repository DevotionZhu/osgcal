/* -*- c++ -*-
    Copyright (C) 2003 <ryu@gpul.org>
    Copyright (C) 2006 Vladimir Shabanov <vshabanoff@gmail.com>

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/
#ifndef __OSGCAL__MESH_DISPLAY_SETTINGS_H__
#define __OSGCAL__MESH_DISPLAY_SETTINGS_H__

#include <osg/Referenced>
#include <osg/Fog>

#include <osgCal/Export>
#include <osgCal/MeshData>

namespace osgCal
{
    struct OSGCAL_EXPORT MeshDisplaySettings : osg::Referenced
    {
        public:
            MeshDisplaySettings();

            /**
             * Use fixed function pipeline for drawing.
             * Use it for testing purpouses only, many
             * features are not supported in software mode.
             * Also switching between hw/sw rendering is not supported.
             */
            bool software;
                    
            /**
             * Show Tangent-Binormal-Normal basis.
             */
            bool showTBN; // TODO: restore it

            /**
             * Enable fog in shader (exp, exp2 or linear mode),
             * 0 by default (no fog)
             */
            osg::Fog::Mode fogMode;

            /**
             * Draw depth only part of submesh first to reduce pixel
             * shading overhead of processing pixels that are not
             * visible.
             * Remark that this option also increases vertex
             * processing time, so it must be used only when pixel
             * shading is a bottleneck.
             * Also this option is ignored for transparent meshes
             * since it will cause incorrect display to them.
             */
            bool useDepthFirstMesh;
    };

    /**
     * Class which helps to select specific per-mesh display settings.
     */
    struct MeshDisplaySettingsSelector : public osg::Referenced
    {
            virtual MeshDisplaySettings* getDisplaySettings( const MeshData* ) = 0;
    };

    struct DefaultMeshDisplaySettingsSelector : public MeshDisplaySettingsSelector
    {
            virtual MeshDisplaySettings* getDisplaySettings( const MeshData* );
    };

    struct ConstMeshDisplaySettingsSelector : public MeshDisplaySettingsSelector
    {
            osg::ref_ptr< MeshDisplaySettings > ds;
            ConstMeshDisplaySettingsSelector( MeshDisplaySettings* d )
                : ds( d )
            {}
                    
            virtual MeshDisplaySettings* getDisplaySettings( const MeshData* )
            {
                return ds.get();
            }
    };


}; // namespace osgCal

#endif
