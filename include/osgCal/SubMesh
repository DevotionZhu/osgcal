/* -*- c++ -*-
    Copyright (C) 2007 Vladimir Shabanov <vshabanoff@gmail.com>

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/
#ifndef __OSGCAL__SUBMESH_H__
#define __OSGCAL__SUBMESH_H__

#include <osg/Version>
#include <osg/Geometry>
#include <osg/PrimitiveSet>
#include <osgUtil/GLObjectsVisitor>

#include <osgCal/Export>
#include <osgCal/CoreModel>
#include <osgCal/Model>

namespace osgCal
{
    class ModelData;
    class SubMeshHardware; // forward

    /**
     * Submesh which is only draws depth part of specified hardware submesh.
     */
    class SubMeshDepth :  public /*osg::Drawable //*/osg::Geometry
    {
        public:
           
            SubMeshDepth( SubMeshHardware* hw );

            virtual void drawImplementation(osg::RenderInfo& renderInfo) const;
            void update( bool deformed, bool changed );

            virtual void compileGLObjects(osg::RenderInfo& renderInfo) const;

            osg::BoundingBox computeBound() const;

            /**
             * See SubMesh::supports() for the comments.
             */
            virtual bool supports( const AttributeFunctor& ) { return false; }

        private:

            SubMeshHardware* hwMesh;

    };


    /**
     * \c osg::Drawable used to render \c CoreModel::SubMesh.
     */
    class OSGCAL_EXPORT SubMesh : public osg::Geometry
    {
        public:
           
            SubMesh( CoreModel*             coreModel,
                     ModelData*             modelData,
                     const CoreModel::Mesh* mesh );

            virtual void update() = 0;

            osg::BoundingBox computeBound() const { return boundingBox; }

            const CoreModel::Mesh* getCoreModelMesh() const { return mesh.get(); }

            /**
             * Return depth submesh for this mesh, can be NULL (for non-opaque meshes).
             */
            SubMeshDepth* getDepthSubMesh() { return depthSubMesh.get(); }

            /**
             * We don't support osgUtil::TransformAttributeFunctor
             * since for non-animated models we share the same vertex
             * buffer that must not be transformed for each model.
             */
            virtual bool supports( const AttributeFunctor& ) { return false; }

            /**
             * For compiling all statesets when Model accepts osgUtil::GLObjectsVisitor.
             * Don't used by software meshes, used by depth and hardware ones.
             */
            virtual void accept( osgUtil::GLObjectsVisitor* ) {}

      private:

      protected:

            osg::ref_ptr< SubMeshDepth >          depthSubMesh;
            osg::ref_ptr< CoreModel >             coreModel;
            osg::ref_ptr< ModelData >             modelData;
            osg::ref_ptr< const CoreModel::Mesh > mesh;
            osg::BoundingBox                      boundingBox;
            bool                                  deformed;

            // TODO: merge SubMeshDepth & SubMeshHardware into one
            // class and move all shared part into other structure.
    };

}; //namespace osgCal

#endif
