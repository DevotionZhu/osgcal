/* -*- c++ -*-
    Copyright (C) 2003 <ryu@gpul.org>
    Copyright (C) 2006 Vladimir Shabanov <vshabanoff@gmail.com>

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/
#ifndef __OSGCAL__SUBMESHSOFTWARE_H__
#define __OSGCAL__SUBMESHSOFTWARE_H__

#include <osg/Version>
#include <osg/Geometry>
#include <osg/PrimitiveSet>
#include <osgCal/Export>
#include <osgCal/CoreModel>
#include <osgCal/Model>

namespace osgCal {

    class OSGCAL_EXPORT SubMeshSoftware : public osg::Geometry
    {
        protected:
            virtual ~SubMeshSoftware();

        public:

//            SubMeshSoftware();
            osg::Object* cloneType() const;
            osg::Object* clone( const osg::CopyOp& ) const;
            virtual bool isSameKindAs(const osg::Object* obj) const { return dynamic_cast<const SubMeshSoftware *>(obj)!=NULL; }
            virtual const char* libraryName() const { return "osgCal"; }
            virtual const char* className() const { return "SubMeshSoftware"; }

            SubMeshSoftware( ModelData*             modelData,
                             const CoreModel::Mesh* mesh );
            SubMeshSoftware(const SubMeshSoftware&, const osg::CopyOp& copyop=osg::CopyOp::SHALLOW_COPY);

            void create();
            void update();

            osg::BoundingBox computeBound() const { return boundingBox; }

            const CoreModel::Mesh* getCoreModelMesh() const { return mesh.get(); }

            /**
             * See SubMeshHardware::supports() for the comments.
             */
            virtual bool supports( const AttributeFunctor& ) { return false; }

        private:

            osg::ref_ptr< ModelData >             modelData;
            osg::ref_ptr< const CoreModel::Mesh > mesh;
            osg::BoundingBox                      boundingBox;
            std::vector< std::pair< osg::Matrix3, osg::Vec3f > >
                                        previousRotationTranslationMatrices;
  
    };

};

#endif
