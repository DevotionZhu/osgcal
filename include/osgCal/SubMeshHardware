/* -*- c++ -*-
    Copyright (C) 2006 Vladimir Shabanov <vshabanoff@gmail.com>

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/
#ifndef __OSGCAL__SUBMESHHARDWARE_H__
#define __OSGCAL__SUBMESHHARDWARE_H__

#include <osg/Version>
#include <osg/Geometry>
#include <osg/PrimitiveSet>

#include <osgCal/Export>
#include <osgCal/CoreModel>
#include <osgCal/Model>

namespace osgCal
{
    class /*OSGCAL_EXPORT*/ SubMeshHardware: public /*osg::Drawable //*/osg::Geometry 
    {
        public:
           
//            SubMeshHardware();
            osg::Object* cloneType() const;
            osg::Object* clone( const osg::CopyOp& ) const;
            virtual bool isSameKindAs(const osg::Object* obj) const { return dynamic_cast<const SubMeshHardware *>(obj)!=NULL; }
            virtual const char* libraryName() const { return "osgCal"; }
            virtual const char* className() const { return "SubMeshHardware"; }

            /**
             * Creates a submesh for one model given the mesh and submesh of this mesh
             */
            SubMeshHardware( Model*     model,
                             int        meshIndex,
                             bool       meshIsStatic );

            virtual void drawImplementation(osg::RenderInfo& renderInfo) const;
            void create();
            void update();

            osg::BoundingBox computeBound() const { return boundingBox; }

            CoreModel::Mesh* getCoreModelMesh() { return mesh; }

        private:

            CoreModel*                  coreModel;
            Model*                      model;
            CalModel*                   calModel;
            CoreModel::Mesh*            mesh;
            osg::BoundingBox            boundingBox;
            bool                        meshIsStatic;
            std::vector< std::pair< osg::Matrix3, osg::Vec3f > >
                                        previousRotationTranslationMatrices;

    };

}; //namespace osgCal

#endif
