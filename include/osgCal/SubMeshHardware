/* -*- c++ -*-
    Copyright (C) 2006 Vladimir Shabanov <vshabanoff@gmail.com>

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/
#ifndef __OSGCAL__SUBMESHHARDWARE_H__
#define __OSGCAL__SUBMESHHARDWARE_H__

#include <osg/Version>
#include <osg/Geometry>
#include <osg/PrimitiveSet>

#include <osgCal/Export>
#include <osgCal/CoreModel>
#include <osgCal/Model>

namespace osgCal
{
    class SubMeshHardware; // forward

    /**
     * Submesh which is only draw depth part of specified hardware submesh.
     */
    class SubMeshDepth :  public /*osg::Drawable //*/osg::Geometry 
    {
        public:
           
            SubMeshDepth( SubMeshHardware* hw );

            virtual void drawImplementation(osg::RenderInfo& renderInfo) const;
            void update( bool deformed );

            osg::BoundingBox computeBound() const;

            /**
             * See SubMeshHardware::supports() for the comments.
             */
            virtual bool supports( const AttributeFunctor& ) { return false; }

        private:

            SubMeshHardware* hwMesh;

    };

    class /*OSGCAL_EXPORT*/ SubMeshHardware : public /*osg::Drawable //*/osg::Geometry 
    {
        public:
           
//            SubMeshHardware();
            osg::Object* cloneType() const;
            osg::Object* clone( const osg::CopyOp& ) const;
            virtual bool isSameKindAs(const osg::Object* obj) const { return dynamic_cast<const SubMeshHardware *>(obj)!=NULL; }
            virtual const char* libraryName() const { return "osgCal"; }
            virtual const char* className() const { return "SubMeshHardware"; }

            /**
             * Creates a submesh for one model given the mesh and submesh of this mesh
             */
            SubMeshHardware( Model*                 model,
                             const CoreModel::Mesh* mesh );

            virtual void drawImplementation( osg::RenderInfo& renderInfo ) const;
            /**
             * Real draw implementation called from SubMeshHardware & SubMeshDepth.
             * They differ in only in state sets so pass it explicitly.
             * We can't use state.getLastAppliedAttribute( osg::StateAttribute::PROGRAM )
             * since it doesn't set when compiling display lists (BTW: why?)
             */
            void drawImplementation( osg::RenderInfo&     renderInfo,
                                     const osg::StateSet* stateSet) const;
            void create();
            void update();

            osg::BoundingBox computeBound() const { return boundingBox; }

            const CoreModel::Mesh* getCoreModelMesh() const { return mesh; }

            /**
             * Return depth submesh for this mesh, can be NULL (for non-opaque meshes).
             */
            SubMeshDepth* getDepthSubMesh() { return depthSubMesh.get(); }

            /**
             * We don't support osgUtil::TransformAttributeFunctor
             * since for non-animated models we share the same vertex
             * buffer that must not be transformed for each model.
             */
            virtual bool supports( const AttributeFunctor& ) { return false; }

        private:

            CoreModel*                  coreModel;
            Model*                      model;
            const CoreModel::Mesh*      mesh;
            osg::BoundingBox            boundingBox;
            std::vector< std::pair< osg::Matrix3, osg::Vec3f > >
                                        previousRotationTranslationMatrices;
            osg::ref_ptr< SubMeshDepth > depthSubMesh;

    };

}; //namespace osgCal

#endif
